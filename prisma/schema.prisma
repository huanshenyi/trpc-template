// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id    String @id @default(uuid())
  title String
  text  String

  // To return `Date`s intact through the API we use transformers
  // https://trpc.io/docs/data-transformers
  // This is unique so it can be used for cursor-based pagination
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String @map("provider_account_id")
  refresh_token String? @db.Text
  refresh_token_expires_in Int?
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model User {
  id String @id @default(cuid())
  name String?
  email String? @unique
  emailVerified DateTime? @map("email_verified")
  image String?
  bio String?
  url String?
  twitterUsername String? @map("twitter_username")
  location String?
  githubUsername String? @map("gethub_username")
  twitterIsPublic Boolean @map("twitter_is_public") @default(false)
  githubIsPublic Boolean @map("github_is_public") @default(false)
  accounts Account[]
  sessions Session[]
  schedules Schedule[]
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Schedule {
  id String @id @default(cuid())
  title String
  content String?
  start DateTime
  end DateTime
  userId String
  isPublic Boolean   @map("is_public") @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("schedules")
}